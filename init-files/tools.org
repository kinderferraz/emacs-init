#+title: Tools.el
#+author: Kinder Rodrigues
#+startup: overview
#+property: header-args :comments yes :results silent :tangle "../init-files-c/tools.el"
#+reveal_theme: night

* Markup
#+begin_src emacs-lisp
(use-package htmlize
  :disabled t)

(use-package plantuml-mode
  :disabled
  :custom
  (plantuml-jar-path "~/.plantuml/plantuml.jar")
  (plantuml-default-exec-mode 'jar)
  (plantuml-indent-level 2))

;; print code
(use-package carbon-now-sh
  :disabled t
  :bind ("M-c" . 'carbon-now-sh))

#+end_src

* DOC-VIEW
#+begin_src emacs-lisp
(add-hook 'doc-view-mode-hook #'auto-revert-mode )
(add-to-list 'revert-without-query ".+\\.pdf$")
#+end_src

* Shell Ops
#+begin_src emacs-lisp
(defun colorize-compilation-buffer ()
  (let ((inhibit-read-only t))
    (ansi-color-apply-on-region (point-min) (point-max))))
(add-hook 'compilation-filter-hook 'colorize-compilation-buffer)

#+end_src

* GIT
#+begin_src emacs-lisp
(use-package magit
  :bind (:map global-map ("C-x g" . 'magit-status))
  :init
  (require 'magit-process nil t)
  :custom
  (magit-commit-show-diff nil)
  (magit-git-executable "/usr/local/bin/git")
  (magit-auto-revert-mode t)
  :custom-face
  (magit-diff-removed           ((t (:background "#352830"))))
  (magit-diff-removed-highlight ((t (:background "#562745"))))
  :config
  (remove-hook 'server-switch-hook 'magit-commit-diff))
#+end_src

* Prog tools
** Yasnippets
#+begin_src emacs-lisp
(use-package yasnippet
  :hook (prog-mode . yas-minor-mode)
  :bind (:map yas-minor-mode-map
              ("C-'" . yas-expand)
              ("TAB" . nil))
  :config
  (use-package yasnippet-snippets)

  (use-package haskell-snippets
    :disabled))

#+end_src
** Syntax Check
#+begin_src emacs-lisp
(use-package flycheck
  :config
  (global-flycheck-mode 1)
  (flycheck-add-mode 'typescript-tslint 'web-mode)
  (flycheck-add-mode 'javascript-eslint 'rjsx-mode))

(use-package flycheck-pos-tip
  :after flycheck
  :config (flycheck-pos-tip-mode))

#+end_src
** Company
#+begin_src emacs-lisp
(use-package company
  :pin melpa
  :hook (after-init . global-company-mode)
  :bind ("s-." . company-manual-begin))

(use-package company-web
  :after company)

#+end_src

* Keybindings
#+begin_src emacs-lisp
(use-package which-key
  :commands which-key-mode
  :config (which-key-mode))
#+end_src

* Projetcs
#+begin_src emacs-lisp
(use-package projectile
  :bind-keymap ("s-p" . projectile-command-map)
  :config
  (projectile-register-project-type
   'npm '("package.json")
   :project-file "package.json"
   :compile "npm install"
   :test "npm test"
   :run "npm start"
   :test-suffix "test.js"))

#+end_src

* Run code
** Persistent Scratch
#+begin_src emacs-lisp
(defun clear-scratch ()
  "Clears BUF if it is *scratch*"
  (interactive)
  (when (string= (buffer-name) "*scratch*")
    (delete-region 1 (point-max))
    (insert initial-scratch-message)))

(bind-key (kbd "M-l") 'clear-scratch 'lisp-interaction-mode-map)

(use-package persistent-scratch
  :config
  (persistent-scratch-setup-default))
#+end_src
** Quick run
Usado apenas para app java console -- disabled
#+begin_src emacs-lisp
(use-package quickrun
  :disabled
  :custom
  (quickrun-timeout-seconds nil))

#+end_src
** Comint
#+begin_src emacs-lisp
(use-package comint
  :ensure nil
  :bind
  (:map comint-mode-map
	("M-l" . comint-clear-buffer)))
#+end_src

* Profile and testing
Ferramentas para conferir o tempo de inicialização!
redução de 10s para 1.84
#+begin_src emacs-lisp :tangle no
(use-package benchmark-init
  :ensure t
  :config
  ;; To disable collection of benchmark data after init is done.
  (add-hook 'after-init-hook 'benchmark-init/deactivate))

(use-package esup
  :ensure t
  :custom
  (esup-depth 0))

#+end_src

#+begin_src emacs-lisp
(use-package ert
  :ensure nil
  :config
  (defalias 'deftest #'ert-deftest )
  (defalias 'runtest #'ert ))
#+end_src

* Package
#+begin_src emacs-lisp
(provide 'tools)
#+end_src

