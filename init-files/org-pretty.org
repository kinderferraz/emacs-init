#+title: org prettify meta lines
#+author: kinder rodrigues
#+email: ferraz.alkindar@gmail.com
#+property: header-args :comments yes :results silent :tangle "../init-files-c/org-pretty.el"
#+startup: overview
#+reveal_theme: night

* Objetivos
After seeing Rasmus' solution, which adds lines beginning with
~#+begin_src~ to ~prettify-symbols-alist~, I've decided to write my own.
Instead of ~prettify-symbols~, I've chosen ~font-lock~ itself for the job.

First a few variables and helper functions are defined, including a
list mapping org keywords to symbols. Then a font-lock rule, which
searches for lines starting with "#+". Based on the line contents, it
replaces the keywords for symbols. The details for finding the
replacement symbol are scattered across a few functions.

Next, to unprettify when point is at a replaced symbol, I've used the
same strategy as ~prettify-symbols-mode~:
- replaced symbols are marked with the start and end of the rplaced region
- when point is at symbol, check if it's display property
- if so, get start and end of region
- save these for later
- remove display prop
- when point leaves region, mark ir for refontification with ~font-lock-flush~

The level of fontification is given by ~k/org-fontify-level~
- simple: just ~#+~ keywords
- keywords: keywords in the rest of the line, starting with ~:~
- full: the entirety of the rest of the line.

There is a bug regarding this last one: The regex assumes there is a
word between ~#+ ... :~ keyword and the rest ~:keyords~, but a few
lines, such as
#+begin_example
#+options: tex:t toc:nil num:nil
#+end_example


will break ~tex~ and ~:t~, and replace just the later with the
appropriate symbol.


* Preps
These are for a prototype version, and I should rewrite the alist
#+begin_src elisp
(add-to-list 'font-lock-extra-managed-props 'display)
(defvar-local k/current-symbol-bounds nil)

(defvar k/org-fontification-level 'simple)
(setq k/org-fontification-level 'keywords)

(setq k/org-font-lock-symbols-alist
      '(("title"     . "")
        ("author"    . "")
        ("block"     . "")
        ("header"    . "")
        ("sql"       . "")
        ("tex"       . "")
        ("name"      . "")
        ("property"  . "")
        ("email"     . "")
        ("startup"   . "")
        ("setupfile" . "")
        ("reveal"    . "")
        ("date"      . "")
        ("caption"   . "")
        ("options"   . "" )

        ("src"       . "✎")
        ("quote"     . ("" ""))
        ("example"   . "")
        ("center"    . "")
        ("comment"   . "")
        ("export"    . "")
        ("verse"     . "")

        ("tangle"    . "")
        ("results"   . "")
        ("comments"  . "")
        ("label"     . "")

        ("engine"    . "")
        ("session"   . "")
        ("dbuser"    . "")
        ("dbhost"    . "")
        ("database"   . "")
        ("dbpassword" . "")

        ("latex"   . "")
        ("sutitle" . "")
        ("class"   . "")
        ("extra"   . "")))


(defvar k/ob-header-symbol "☰")

;; (setq re "^[ \t]*\\(#\\+\\w*:?\\)\\(_\\w*:?\\)* ?\\([ \t[:alnum:]\"@,.-]*\\)\\(.*\\)$")
(setq re (rx line-start
             (zero-or-more space)
             (group "#+" (one-or-more (or letter "_"))
                    (zero-or-one ":"))
             (zero-or-more space)
             (group (zero-or-more (any alnum "\"" ?@ ?. ?, " " "-")))
             (group (zero-or-more (category base)))
             line-end))

#+end_src


* Helpers
#+name: requires
#+begin_src elisp
(require 's)
(require 'dash)
#+end_src

#+name: string and manipulation
#+begin_src elisp
(defsubst chops (str)
  (unless (null str)
    (->> str
         s-downcase
         (s-chop-prefixes '("#+" ":" "_"))
         (s-chop-suffixes '(":")))))

(defsubst k/maybe-drop (list)
  "if any item is nil, return nil, else return LIST"
  (if (-any? 'null list)
      nil
    list))

(defun yant/str-to-glyph (str)
  "Transform string into glyph, displayed correctly."
  (let ((composition nil))
    (dolist (char (string-to-list str)
                  (nreverse (cdr composition)))
      (push char composition)
      (push '(Br . Bl) composition))))
#+end_src

#+name: keyword manipulation
#+begin_src emacs-lisp
(defun k/normalize-keywords (kws)
  "Rules for getting keyword symbols from the alist.
KWS input is a list of the words used.
Returns the values for the symbols in the alist, in the correct order."
  ;; WRONG: since kws will be placed as the last argument of each sexp,
  ;; they will always serve as an implicit else expression in ifs
  ;; (if used when, the value of kws would be returned unchanged)
  ;; -- it is only true for the first if-expression
  (->> kws
       ;; verifica se é begin || end
       (if (string= (car kws) "end")
           (list (cadr kws) (car kws)))
       (-replace "begin" "block")
       (-replace "end" "block")
       ((lambda (x)
          (if (string= (car x) "reveal")
              (list (car x))
            x)))

       ;; map kws to symbol alist
       (--map (alist-get it k/org-font-lock-symbols-alist
                         nil nil #'string-equal ))
       ;; in case begin and end symbols are different
       ;; begin case
       ((lambda (x)
          (if (consp (cadr x))
              (list (car x) (caadr x))
           x)))

       ;; end case
       ((lambda (x)
          (if (consp (car x))
              (list (cadar x) (cadr x))
           x)))

       k/maybe-drop
       (-reduce 'concat)
       ))


(defun k/get-string (keyword)
  (-some->> keyword
    chops
    (s-split "_")
    k/normalize-keywords
    yant/str-to-glyph))
#+end_src

#+name: buffer manipulation:
#+begin_src emacs-lisp
(defun get-prop-as-list (prop)
  "Helper: identify if char at point has PROP."
  (remove nil
          (list (get-text-property (point) prop)
                (when (and (eq prettify-symbols-unprettify-at-point 'right-edge)
                           (not (bobp)))
                  (get-text-property (1- (point)) prop)))))
#+end_src


* Fontificar
#+begin_src emacs-lisp
(defun k/fontify-keywords (line-beg limit)
  "Fontify keywords starting with :, from LINE_BEG to LIMIT.
LIMIT should be the end of line."
  (save-excursion
    (goto-char line-beg)
    (while (re-search-forward ":\\w+" limit t)
      (when-let ((s (match-beginning 0))
                 (e (match-end 0))
                 (symbol (k/get-string (match-string 0))))
        (compose-region s e symbol)
        (add-text-properties s e
                             `(k/org-pretty-s ,s
                               k/org-pretty-e ,e))))))

(defun k/fontify-symbols (limit)
  "Search for #+ lines, and replace them whit appropriated symbols.
If k/org-fontification-level is 'full, replace rest of line with symbol,
if it is 'keywords, pass rest of line to k/fontify-keywords.

Marks all replacements with beginning and end positions."
  (save-excursion
    (while (re-search-forward re limit t)
      (when-let* ((s (match-beginning 1))
             (e (match-end 1))
             (symbol (k/get-string (match-string 1))))
        (compose-region s e symbol)
        (add-text-properties s e `(k/org-pretty-s ,s k/org-pretty-e ,e))

        (when (match-string 3)
          (when (eq k/org-fontification-level 'full)
            (when-let* ((s (match-beginning 3))
                        (e (match-end 3)))
              (compose-region s e k/ob-header-symbol)
              (add-text-properties s e
                                   `(k/org-pretty-s ,s
                                     k/org-pretty-e ,e))))

          (when (eq k/org-fontification-level 'keywords)
            (k/fontify-keywords (match-beginning 3)
                                (match-end 3))))))))

#+end_src


* Desesconder
#+begin_src emacs-lisp
(defun k/unfontify-current-symbol ()
  "When point is at a replaced symbols, remove display prop and save
bounds of symbol."
  (when-let* ((d (get-prop-as-list 'composition))
              (s (get-prop-as-list 'k/org-pretty-s))
              (e (get-prop-as-list 'k/org-pretty-e))
              (s (apply #'min s))
              (e (apply #'max e)))
    (with-silent-modifications
      (setq k/current-symbol-bounds (list s e))
      (remove-text-properties s e '(composition nil)))))

(defun k/refontify-current-symbol ()
  "When point is outside of region in k/current-symbol-bounds,
reapply fontification to region and unset region"
  (when (and k/current-symbol-bounds
	       (or (< (point) (car k/current-symbol-bounds))
		             (> (point) (cadr k/current-symbol-bounds))
		             (and (not (eq prettify-symbols-unprettify-at-point 'right-edge))
			                (= (point) (cadr k/current-symbol-bounds)))))
    (with-silent-modifications
      (font-lock-flush (car k/current-symbol-bounds)
                       (cadr k/current-symbol-bounds))
      (setq k/current-symbol-bounds nil))))

#+end_src


* Finalizando
#+begin_src emacs-lisp
;; use fontify rules
(font-lock-add-keywords
 'org-mode
 '((k/fontify-symbols))
 t)

;; use hook to unfontify and refontify symbols
(add-hook 'org-mode-hook
          '(lambda ()
             (add-hook 'post-command-hook #'k/unfontify-current-symbol nil t)
             (add-hook 'post-command-hook #'k/refontify-current-symbol nil t)))

(provide 'org-pretty)
#+end_src


* Scratch
In case of errors:
#+begin_src elisp :tangle no
;; Remove rules from alist and remove hook. In short, stop useing
;; everything in this file
(font-lock-remove-keywords
 nil
 '((k/fontify-symbols)
   (k/unfontify-current-line)))

(remove-hook 'post-command-hook #'k/unfontify-current-symbol t)
(remove-hook 'post-command-hook #'k/refontify-current-symbol t)

(k/get-string "reveal:")
#+end_src
