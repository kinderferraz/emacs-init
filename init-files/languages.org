#+title: Emacs Programing.el
#+author: Kinder Rodrigues
#+startup: overview
#+property: header-args :comments yes :results silent :tangle "../init-files-c/languages.el"
#+reveal_theme: night

* Servers
** LSP
#+begin_src emacs-lisp
(use-package lsp-mode
  :hook ((haskell-mode   . lsp-mode)
         ;; (python-mode . lsp-mode)
         (yaml-mode      . lsp-mode)
         (c++-mode       . lsp-mode))
  :config
  (use-package lsp-ui
    :custom
    (lsp-ui-imenu-enable nil)
    (lsp-ui-peek-enable nil)
    (lsp-headerline-breadcrumb-enable nil)

    ;; sideline
    (lsp-ui-sideline-delay 4)
    (lsp-ui-sideline-update-mode 'line)
    (lsp-ui-sideline-show-code-actions nil)

    ;; docs
    (lsp-ui-doc-show-whit-mouse nil)
    (lsp-ui-doc-show-with-cursors nil)
    (lsp-ui-doc-show-over-cursors nil)
    (lsp-ui-doc-position 'at-point)
    (lsp-ui-doc-delay 2)
    :bind
    (:map lsp-ui-mode-map
          ("s-," . lsp-ui-doc-show)))
  :commands lsp)


#+end_src

** DAP
#+begin_src emacs-lisp
(use-package dap-mode
  :after lsp-mode
  :config (progn
            (dap-mode t)
            (dap-ui-mode nil)
            (dap-tooltip-mode 1)
            (tooltip-mode 1)))

#+end_src

* Python
#+begin_src emacs-lisp
(use-package elpy
  :config
    (delete 'elpy-module-highlight-indentation elpy-modules)
    (delete 'elpy-module-flymake elpy-modules)
    (elpy-enable)
  :hook
    ((python-mode . elpy-mode))
  :custom
      (python-indent-offset             4)
      (elpy-rpc-virtualenv-path  'current)
      (python-shell-interpreter-args "-i")
      (python-shell-completion-native-enable         nil)
      (compilation-ask-about-save                    nil))

  (use-package py-autopep8
    :ensure t
    :hook (python-mode . py-autopep8-enable-on-save))

#+end_src

* JAVA
#+begin_src emacs-lisp
(use-package lsp-java
  :hook ((java-mode . lsp))
  :custom
  ((lsp-java-save-actions-organize-imports t)
   (lsp-java-import-gradle-enabled t)
   (lsp-java-import-maven-enabled  t)
   (c-basic-offset 4)
   (lsp-file-watch-threshold 5000)
   (lsp-java-jdt-download-url
    (concat "https://download.eclipse.org/jdtls/milestones/0.57.0/"
            "jdt-language-server-0.57.0-202006172108.tar.gz"))
   (lsp-java-imports-gradle-wrapper-checksums
    '[(:sha256 "830b509d6f466f1222320def2cb04fbeac9c1f033cd1bd3e2f81f4188cea175c"
       :allowed t)]))

  :hook
  ((lsp-mode  . lsp-lens-mode)
   (java-mode . lsp-java-boot-lens-mode))

  :bind
  (:map lsp-mode-map
        ("C-j g" . 'lsp-java-generate-getters-and-setters)
        ("C-j d" . 'dap-java-debug)))

(use-package dap-java
  :ensure nil
  :defer t)

#+end_src

* Haskell
#+begin_src emacs-lisp :tangle no
(use-package intero
  :hook (haskell-mode . intero-mode))

(use-package haskell-mode
  :mode (("\\.hs\\'"    . haskell-mode)
         ("\\.cabal\\'" . haskell-cabal-mode)
         ("\\.hcr\\'"   . haskell-core-mode))
  :interpreter ("haskell" . haskell-mode)

  :config
  (require 'haskell)
  (require 'haskell-mode)
  (require 'haskell-interactive-mode)
  (require 'autoinsert)


  (define-skeleton haskell-skeleton
    "Default Haskell file initial contents."
    nil
    "-- | " _ "\n\n"
    "module "
    (haskell-guess-module-name)
    " where\n\n")

  (define-auto-insert "\\.hs" 'haskell-skeleton)
)
#+end_src

* WEB
#+begin_src emacs-lisp
(use-package web-mode
  :mode (("\\.html?\\'"  . web-mode)
         ("\\.css\\'"    . web-mode)
         ("\\.tsx\\'"    . web-mode)
         ("\\.jsp\\'"    . web-mode))
  :hook
  ((web-mode . company-mode)
   (web-mode . (lambda ()
                 (when (string-equal "tsx" (file-name-extension buffer-file-name))
                   (progn
                     (tide-setup)
                     (add-hook 'before-save 'tide-format-before-save)))))
   (web-mode . (lambda ()
                 (set (make-local-variable 'company-backends)
                      '(company-web-html company-files)))))
  :custom
  (web-mode-markup-indent-offset     2)
  (web-mode-css-indent-offset        2)
  (web-mode-code-indent-offset       2)

  :config
  (nconc web-mode-content-types-alist
         '(("jsp" . "\\.jsp$"))))

(use-package emmet-mode
  :hook
  ((web-mode   . emmet-mode)
   (rjsx-mode  . emmet-mode))
  :custom
  (emmet-indent-after-insert nil))

#+end_src

* Node & TS
#+begin_src emacs-lisp
(use-package rjsx-mode
  :pin melpa
  :mode
  (("\\.js\\'"  . rjsx-mode)
   ("\\.jsx\\'" . rjsx-mode))
  :hook
  (rjsx-mode . tide-setup)

  :custom
  (js-indent-level          2)
  (sgml-basic-offset        0))

(use-package tide
  :mode (("\\.ts\\'" . typescript-mode))
  :after (typescript-mode company flycheck)
  :hook ((typescript-mode . tide-setup)
         (typescript-mode . tide-hl-identifier-mode)
         (before-save     . tide-format-before-save))

  :config
  (bind-key "C-c t s" #'tide-rename-symbol tide-mode-map)
  (setq typescript-indent-level 2)
  (setq tide-format-options
        '(:indentSize 2
          :indentStyle "Block"
          :convertTabsToSpaces nil
          :placeOpenBraceOnNewLineForFunctions nil
          :insertSpaceAfterSemicolonInForStatements nil
          :insertSpaceAfterFunctionKeywordForAnonymousFunctions t))
  (setq tide-user-preferences
        '(:includeCompletionsForModuleExports t
          :includeCompletionsWithInsertText t
          :allowTextChangesInNewFiles t
          :quotePreference "single")))


(use-package npm-mode
  :pin melpa
  :hook ((rjsx-mode       . npm-mode)
         (typescript-mode . npm-mode)
         (web-mode        . npm-mode)))

#+end_src

* SQL
#+begin_src emacs-lisp
(use-package sql
  :ensure nil
  :custom
  (sql-user "root")
  (sql-password nil)
  :hook (sql-mode . (lambda ()
                      (company-box-mode -1)))
  :config
  ;; configuração teste, base de dados usada numa aula
  ;; no terminal:
  ;; psql -h "lallah.db.elephantsql.com" skcpwxys skcpwxys
  (setq sql-postgres-login-params
        '((user     :default "skcpwxys")
          (database :default "skcpwxys")
          (server   :default "lallah.db.elephantsql.com")
          (port     :default 5432)))
  (setq sql-mysql-login-params
        '((user     :default "root")
          (password)
          (database :default "imobiliaria")
          (server   :default "localhost"))))

(use-package sqlformat
  :hook (sql-mode . sqlformat-on-save-mode)
  :custom
  ;; (sqlformat-command 'pgformatter)
  ;; (sqlformat-args '("-s" "2" "-u" "1")))
  (sqlformat-command 'sqlparse)
  (sqlformat-args '("-k" "lower" "-i" "lower"
                    "--indent-width" "2" "--indent_columns")))

#+end_src

* LaTeX
#+begin_src emacs-lisp
(defun TeX-highlight-region (beg end)
  "Insert highlight macro at BEG of region and closing bracket at END."
  (interactive
   (if mark-active
       (list (region-beginning) (region-end))))
  (when (and beg end)
    (save-excursion
      (let ((hl-beg "\\hl{")
            (hl-end "}"))
        (goto-char end)
        (insert hl-end)
        (goto-char beg)
        (insert hl-beg)))
    (goto-char (+ 6 end))))
#+end_src
#+begin_src emacs-lisp
(use-package auctex
  :mode ("\\.tex\\'" . LaTeX-mode)

  :hook
  (TeX-mode  . TeX-fold-mode)
  (TeX-mode  . prettify-symbols-mode)
  (TeX-mode  . auto-fill-mode)

  :init
  (add-hook 'TeX-after-compilation-finished-functions
            #'TeX-revert-document-buffer)

  :custom
  (TeX-save-query          nil)
  (TeX-auto-save             t)
  (TeX-parse-self            t)
  (TeX-master              nil)
  (TeX-PDF-mode              t)
  (TeX-engine          'luatex)

  (LaTeX-default-style 'abntex2)

  (TeX-view-program-selection '((output-pdf "PDF Tools")))
  (TeX-view-program-list      '(("PDF Tools" TeX-pdf-tools-sync-view)))
  (TeX-source-correlate-start-server t)

  :bind
  (:map TeX-mode-map
        ("s-a"   . TeX-command-run-all)
        ("s-e"   . LaTeX-environment)
        ("s-p"   . LaTeX-section)
        ("s-h"   . TeX-highlight-region)))
#+end_src
*** verificar confs auctex
*** verificar integração com bibLatex

* R
#+begin_src emacs-lisp
(use-package ess
  :disabled
  :init (require 'ess-site)
  :mode (("\\.r\\'" . r-mode))

  :config
  (ess-set-style 'RStudio)

  :custom
  (ess-ask-for-ess-directory nil) ;; start R on default folder
  (ess-local-process-name "R")

  :bind-keymap ("C-r" . ess-mode-map)
  :bind
  (:map ess-r-mode-map
        ("C-r r" . R)
        ("_" . ess-insert-assign)
   :map inferior-ess-r-mode-map
        ("_" . ess-insert-assign))
  :hook
  (((ess-mode)  . #'(lambda ()
                    (flymake-mode-off)
                    (flycheck-mode 1)))))
#+end_src

* SLIME
#+name: quicklisp shortcuts
#+begin_src emacs-lisp :tangle no
(defslime-repl-shortcut slime-repl-quicklisp ("ql" "quicklisp")
  (:handler (lambda (system)
              (interactive "sSystem: ")
              (slime-eval-async `(ql:quickload ,system)
                (lambda (sys)
                  (message "Quickloaded %s" (first sys))))))
  (:one-liner "Quickload a system."))
(defslime-repl-shortcut slime-repl-load-system ("load")
  (:handler (lambda (system)
              (interactive "sSystem: ")
              (setq system (downcase system))
              (slime-eval-async `(asdf:load-system ,system)
                (lambda (sys)
                  (message "ASDF loaded %s" (first sys))))))
  (:one-liner "ASDF loaded a system."))
(defslime-repl-shortcut slime-repl-test-system ("test")
  (:handler (lambda (system)
              (interactive "sSystem: ")
              (setq system (downcase system))
              (slime-eval-async `(ql:quickload ,system)
                (lambda (sys)
                  (message "ASDF loaded %s" sys)
                  (slime-eval-async `(asdf:test-system ,@sys)
                    (lambda (sys)
                      (message "ASDF tested %s" (first sys))))))))
  (:one-liner "ASDF tested a system."))
(defslime-repl-shortcut slime-repl-set-system ("system")
  (:handler (lambda (system)
              (interactive "sSystem: ")
              (slime-eval-async `(ql:quickload ,system)
                (lambda (sys)
                  (message "Quickloaded %s" sys)
                  (let ((directory (slime-eval `(cl:namestring (asdf:system-source-directory ,@sys)))))
                    (slime-set-default-directory directory))))))
  (:one-liner "Quickload a system and move to the root directory."))
(defslime-repl-shortcut slime-repl-register-local-projects ("register")
  (:handler (lambda ()
              (interactive)
              (slime-eval-async `(ql:register-local-projects)
                (lambda (sys)
                  (message "Registered local projects.")))))
  (:one-liner "Call ql:register-local-projects."))
#+end_src
#+begin_src emacs-lisp :noweb yes
(use-package slime
  :config
  (load (expand-file-name "~/quicklisp/slime-helper.el"))
  (setq slime-contribs
        '(slime-repl slime-autodoc slime-banner slime-repl-ansi-color))
  (require 'slime-autoloads)
  (unbind-key "M-n" 'slime-mode-indirect-map)

  (use-package slime-repl
    :ensure nil
    :bind (:map slime-repl-mode-map
                ("M-l"      . slime-repl-clear-buffer)
                ("M-k"      . slime-interrupt)
                ("M-r"      . slime-restart-inferior-lisp)
                ("s-<left>" . slime-repl-bol))
    :config
    <<quicklisp shortcuts>>
    )

  (use-package slime-autodoc
    :ensure nil)

  :bind
  (:map slime-mode-map
        ("s-l"     . slime)
        ("s-."     . completion-at-point)
        ("C-c C-z" . slime-call-defun)
        ("C-c C-f" . slime-compile-and-load-file)))

#+end_src

* Markup
#+begin_src emacs-lisp
(use-package htmlize
  :disabled t)

(use-package plantuml-mode
  :disabled
  :custom
  (plantuml-jar-path "~/.plantuml/plantuml.jar")
  (plantuml-default-exec-mode 'jar)
  (plantuml-indent-level 2))

;; print code
(use-package carbon-now-sh
  :disabled t
  :bind ("M-c" . 'carbon-now-sh))

#+end_src
#+begin_src emacs-lisp
(use-package yaml-mode
  :ensure t)
#+end_src

* Package Info
#+begin_src emacs-lisp
  (provide 'languages)
#+end_src
