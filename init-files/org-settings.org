#+title: org settings.el
#+author: kinder rodrigues
#+property: header-args :comments yes :results silent :tangle "../init-files-c/org-settings.el"
#+options: tex:t toc:nil num:nil
#+startup: overview
#+reveal_theme: night

* Helper Functions
Pure regexps
:Regexps:
"#\+\(\w\|_\)*:?"
"#\+\,(downcase \1)"
:end:

#+begin_src emacs-lisp
;; format sql buffer after tangle
(defun k/format-sql-after-tangle ()
  (when (string-equal (major-mode) "sql")
    (sqlformat-buffer)))

(defun k/downcase-org-key-words ()
  (interactive)
  (setq case-replace nil)
  (save-excursion
    (goto-char (point-min))
    (while (< (point) (point-max))
      (when (looking-at "#\\+\\(\\w\\|_\\)*:?")
        (progn
          (downcase-word 1)
          (when (looking-at "_\\w*:?")
            (downcase-word 1))))
      (forward-line 1))))

#+end_src

* Plain Org
- [ ] await abntex2 to configure latex export (with lualatex)
#+begin_src emacs-lisp
(use-package org
  :ensure nil
  :pin org
  :config
  (add-to-list 'org-modules 'org-tempo)
  (setf (alist-get "\\.pdf\\'" org-file-apps nil nil #'equal) 'emacs)

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((latex     . t)
     (python    . t)
     ;;(sh        . t)
     (css       . t)
     (js        . t)
     (sql       . t)
     (java      . t)
     (plantuml  . t)))

  (add-to-list 'org-src-lang-modes '("js" . rjsx))
  (add-to-list 'org-src-lang-modes '("jsx" . rjsx))
  (add-to-list 'org-src-lang-modes '("ts" . typescript))
  (add-to-list 'org-src-lang-modes '("tsx" . typescript))
  (add-to-list 'org-src-lang-modes '("r"  . ess))
  (add-to-list 'org-src-lang-modes '("plantuml" . plantuml))

  :hook
  ((org-mode . toggle-truncate-lines)
   (org-mode . auto-fill-mode)
   (org-babel-post-tangle-hook . k/format-sql-after-tangle))

  :custom
  ;; (org-latex-compiler "lualatex")
  (org-cycle-separator-lines   -1)
  (org-src-preserve-indentation t)
  (org-src-tab-acts-natively    t)

  (org-adapt-indentation      nil)
  (org-confirm-babel-evaluate nil)

  (org-cycle-emulate-tab 'exc-hl-bol)
  (org-support-shift-select 'always)
  (org-hide-block-startup t)

  (org-todo-keywords '((sequence "todo" "coding"
                                 "|" "done"
                                 "forgotten")))
  :custom-face
  (org-block-begin-line ((t (:background nil))))
  :bind
  (:map org-mode-map
        ("s-n"         . org-narrow-to-subtree)
        ("s-S-<down>"  . org-babel-next-src-block)
        ("s-S-<up>"    . org-babel-previous-src-block)))

(use-package ox
  :ensure nil
  :after org
  :custom
  (org-export-in-background nil)
  (org-export-async-init-file
   (concat (expand-file-name user-emacs-directory)
           "init-files-c/org-async.el"))
  (org-export-dispatch-use-expert-ui t)
  (org-plantuml-jar-path "~/.plantuml/plantuml.jar"))

#+end_src

* Org babels
#+begin_src emacs-lisp :tangle no
(use-package ob-python
  :defer t
  :ensure org-plus-contrib
  :commands (org-babel-execute:python))

(use-package ob-sql
  :defer t
  :ensure org-plus-contrib
  :commands (org-babel-execute:sql
             org-babel-expand-body:sql))

(use-package ob-emacs-lisp
  :defer t
  :ensure org-plus-contrib
  :commands (org-babel-execute:emacs-lisp
             org-babel-expand-body:emacs-lisp))

#+end_src

* org-journal
#+begin_src elisp
  (use-package org-journal
    :ensure t
    ;;  :hook (bind-key (kbd "c-c c-s") 'org-journal-schedule)
    :bind ("C-c n" . org-journal-new-entry))


  (defun org-journal-find-location ()
    ;; open today's journal, but specify a non-nil prefix argument in order to
    ;; inhibit inserting the heading; org-capture will insert the heading.
    (org-journal-new-entry t)
    ;; position point on the journal's top-level heading so that org-capture
    ;; will add the new entry as a child entry.
    (goto-char (point-min)))

  (setq org-capture-templates
    '(("j" "journal entry" entry (function org-journal-find-location)
       "* %(format-time-string org-journal-time-format)%^{title}\n%i%?")))
#+end_src

* ox-latex
#+begin_src elisp :tangle no
  (use-package ox-latex
    :ensure nil
    :defer t
    :config
      (add-to-list 'org-latex-classes
        `("abntex2"
          ,(concat "\\documentclass[a4paper,"
                   "\n\t12pt,"
                   "\n\toneside,"
                   "\n\tenglish,"
                   "\n\tbrazil,"
                   "\n\tarticle] {abntex2}"
                   "\n\n[PACKAGES]"
                   "\n[NO-DEFAULT-PACKAGES]\n"
                   "\n\\setmainfont["
                   "\n\t\tPath={/Users/alkindarferraz/Library/Fonts/},"
                   "\n\t\tItalicFont = {NewBaskerville-Italic.otf},"
                   "\n\t\tBoldFont = {NewBaskerville-Bold.otf},"
                   "\n\t\tBoldItalicFont = {NewBaskerville-BoldItalic.otf},"
                   "\n\t\tSmallCapsFont = {NewBaskerville-SC.otf},"
                   "\n\t\tLigatures = {TeX},"
                   "\n]{NewBaskerville-Roman.otf}\n\n"
                   "\\setlength{\\parindent}{4em}\n"
                   "\\MakeBlockQuote{<}{|}{>}\n"
                   "\\SetBlockEnvironment {citacao}\n\n")
         ("\\section{%s}" . "\\section*{%s}")
         ("\\subsection{%s}" . "\\subsection*{%s}")
         ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
         ("\\paragraph{%s}" . "\\paragraph*{%s}")
         ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

    :custom
      (org-latex-packages-alist
        '((#1="" "fontspec" t ("lualatex"))
          (#1="" "graphicx" t)
          ("verbose = silent" "microtype" t)
          (#1="" "verbatim" nil)
          (#1="" "verbatim" nil)
          ("autostyle = false" "csquotes" nil)
          (#1="" "indentfirst" nil)))


      (setq org-latex-pdf-process
            '("latexmk -gg -lualatex %f")))

#+end_src

* org-reveal
#+begin_src emacs-lisp
(use-package ox-reveal
  :ensure t
  :defer t
  :config
  (load-library "ox-reveal")
  :custom (org-reveal-root "file:///usr/local/lib/node_modules/reveal.js"))

#+end_src

* package
#+begin_src emacs-lisp
(provide 'org-settings)
#+end_src
