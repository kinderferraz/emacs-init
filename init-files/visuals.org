#+title: Emacs Visuals.el
#+author: Kinder Rodrigues
#+startup: overview
#+property: header-args :comments yes :results silent :tangle "../init-files-c/visuals.el"
#+reveal_theme: night

* Editing
** Cursor Behaviour
#+begin_src emacs-lisp
(use-package multiple-cursors
  :bind
  ((:map global-map)
   ("C-c e"    . 'mc/edit-lines)
   ("C-,"      . 'mc/mark-previous-like-this)
   ("C-."      . 'mc/mark-next-like-this)
   ("C-c C-."  . 'mc/mark-all-like-this)
   ("C-c ."    . 'mc/edit-ends-of-lines)
   ("C-c ,"    . 'mc/edit-beginnings-of-lines)))

(defun move-line-up ()
  (interactive)
  (transpose-lines 1)
  (forward-line -2))

(defun move-line-down ()
  (interactive)
  (forward-line 1)
  (transpose-lines 1)
  (forward-line -1))

(setq-default tab-always-indent 'complete)
(setq-default indent-tabs-mode nil)
(setq-default tab-width 2)

(setq-default default-input-method 'portuguese-prefix)

(global-hl-line-mode)
(global-subword-mode 1)

(global-set-key (kbd "S-<backspace>") 'delete-trailing-whitespace)
(global-set-key (kbd "s-<up>")        'move-line-up)
(global-set-key (kbd "s-<down>")      'move-line-down)
(global-set-key (kbd "C-<left>")      'backward-word)
(global-set-key (kbd "C-<right>")     'forward-word)
(global-set-key (kbd "M-u") 'upcase-dwim)
(global-set-key (kbd "M-l") 'downcase-dwim)
(global-set-key (kbd "M-c") 'capitalize-dwim)
#+end_src
** Delimiters
#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :hook ((prog-mode   LaTeX-mode
          comint-mode slime-repl-mode)
         . rainbow-delimiters-mode)
  :custom-face
  (rainbow-delimiters-depth-1-face ((t (:foreground "#a901db"))))
  (rainbow-delimiters-depth-2-face ((t (:foreground "#fe2e2e"))))
  (rainbow-delimiters-depth-3-face ((t (:foreground "#d75f00"))))
  (rainbow-delimiters-depth-4-face ((t (:foreground "#aeb404"))))
  (rainbow-delimiters-depth-5-face ((t (:foreground "#088a08"))))
  (rainbow-delimiters-depth-6-face ((t (:foreground "#008787"))))
  (rainbow-delimiters-depth-8-face ((t (:foreground "#2eccfa"))))
  (rainbow-delimiters-depth-9-face ((t (:foreground "#cc2efa")))))
#+end_src
#+begin_src emacs-lisp
(use-package smartparens
  :hook
  ((prog-mode text-mode org-mode comint-mode) . smartparens-mode)
  ((emacs-lisp-mode slime-mode)               . smartparens-strict-mode)
  :bind
  (:map smartparens-mode-map
        ("C-k"  . sp-kill-sexp)
        ("C->"  . sp-forward-slurp-sexp)
        ("C-<"  . sp-forward-barf-sexp)
        ("M-<"  . sp-backward-slurp-sexp)
        ("M->"  . sp-backward-barf-sexp)
        ("M-<backspace>"   . sp-backward-unwrap-sexp)
        ("C-<backspace>"   . sp-backward-kill-word))

  :config
  (show-smartparens-global-mode t)

  (sp-local-pair '(org-mode latex-mode) "\\[" "\\]" :actions '(insert wrap))
  (sp-local-pair '(org-mode latex-mode) "``"  "''"  :actions '(insert wrap))
  (sp-local-pair '(org-mode latex-mode) "\""  "\""  :actions '(insert wrap))

  (sp-local-pair '(lisp-mode emacs-lisp-mode scheme-mode)
                 "`" nil
                 :actions nil)
  (sp-local-pair '(lisp-mode emacs-lisp-mode scheme-mode)
                 "'" nil
                 :actions nil)

  :custom-face
  (sp-show-pair-match-face ((t (:foreground "#b877db"
                                            :background nil)))))
#+end_src
** Folding
#+begin_src emacs-lisp
(use-package hideshow
  :ensure nil
  :hook ((org-mode      . hs-minor-mode)
         (prog-mode     . hs-minor-mode)
         (c-mode-common . set-c-regexp))
  :custom (hs-allow-nesting t)
  :bind
  (("C-f" . hs-toggle-hiding)
   ("C-t" . hs-hide-level)
   ("C-a" . hs-show-all))
  :config
  (defun set-c-regexp ()
    (setq hs-block-start-regexp "\\s(")
    (setq hs-block-end-regexp   "\\s)")))

;;show whitespace
(setq-default show-trailing-whitespace t)

;; but not in buffer-menu
(add-hook 'buffer-menu-mode-hook
          (lambda ()
            (setq show-trailing-whitespace nil)))

(set-display-table-slot standard-display-table 'truncation
                        (make-glyph-code ?â€¦))
#+end_src
** Font Ligatures
#+begin_src emacs-lisp :tangle no
(use-package ligature
  :load-path "./ligatures/"
  :config
  (ligature-set-ligatures
   't
   '("|||>" "<|||" "<==>" "<!--" "####" "~~>" "***" "||=" "||>"
     ":::" "::=" "=:=" "===" "==>" "=!=" "=>>" "=<<" "=/=" "!=="
     "!!." ">=>" ">>=" ">>>" ">>-" ">->" "->>" "-->" "---" "-<<"
     "<~~" "<~>" "<*>" "<||" "<|>" "<$>" "<==" "<=>" "<=<" "<->"
     "<--" "<-<" "<<=" "<<-" "<<<" "<+>" "</>" "###" "#_(" "..<"
     "..." "+++" "/==" "///" "_|_" "www" "&&" "^=" "~~" "~@" "~="
     "~>" "~-" "**" "*>" "*/" "||" "|}" "|]" "|=" "|>" "|-" "{|"
     "[|" "]#" "::" ":=" ":>" ":<" "$>" "==" "=>" "!=" "!!" ">:"
     ">=" ">>" ">-" "-~" "-|" "->" "--" "-<" "<~" "<*" "<|" "<:"
     "<$" "<=" "<>" "<-" "<<" "<+" "</" "#{" "#[" "#:" "#=" "#!"
     "##" "#(" "#?" "#_" "%%" ".=" ".-" ".." ".?" "+>" "++" "?:"
     "?=" "?." "??" ";;" "/*" "/=" "/>" "//" "__" "~~" "(*" "*)"
     "\\" "://" "www"))
  (global-ligature-mode t))
#+end_src
#+begin_src emacs-lisp :tangle no
(use-package fira-code-mode
  :custom (fira-code-mode-disabled-ligatures '("[]" "#{" "#(" "#_" "#_("))
  :config
  (global-fira-code-mode))

#+end_src
#+begin_src emacs-lisp
(use-package composite
  :ensure nil
  :init
  (defvar composition-ligature-table (make-char-table nil))
  :hook
  ((prog-mode text-mode conf-mode nxml-mode
    markdown-mode help-mode org-mode)
   . (lambda ()
       (setq-local composition-function-table
                   composition-ligature-table)))
  :config
  ;; support ligatures, some toned down to prevent hang
  (when (version<= "27.0" emacs-version)
    (let ((alist
           '((33 . ".\\(?:\\(==\\|[!=]\\)[!=]?\\)")
             (35 . ".\\(?:\\(###?\\|_(\\|[(:=?[_{]\\)[#(:=?[_{]?\\)")
             (36 . ".\\(?:\\(>\\)>?\\)")
             (37 . ".\\(?:\\(%\\)%?\\)")
             (38 . ".\\(?:\\(&\\)&?\\)")
             (42 . ".\\(?:\\(\\*\\*\\|[*>]\\)[*>]?\\)")
             (43 . ".\\(?:\\([>]\\)>?\\)")
             (45 . ".\\(?:\\(-[->]\\|<<\\|>>\\|[-<>|~]\\)[-<>|~]?\\)")
             (46 . ".\\(?:\\(\\.<\\|[-=]\\)[-<=]?\\)")
             (47 . ".\\(?:\\(//\\|==\\|[=>]\\)[/=>]?\\)")
             (48 . ".\\(?:\\(x[a-fA-F0-9]\\).?\\)")
             (58 . ".\\(?:\\(::\\|[:<=>]\\)[:<=>]?\\)")
             (59 . ".\\(?:\\(;\\);?\\)")
             (60 . ".\\(?:\\(!--\\|\\$>\\|\\*>\\|\\+>\\|-[-<>|]\\|/>\\|<[-<=]\\|=[<>|]\\|==>?\\||>\\||||?\\|~[>~]\\|[$*+/:<=>|~-]\\)[$*+/:<=>|~-]?\\)")
             (61 . ".\\(?:\\(!=\\|/=\\|:=\\|<<\\|=[=>]\\|>>\\|[=>]\\)[=<>]?\\)")
             (62 . ".\\(?:\\(->\\|=>\\|>[-=>]\\|[-:=>]\\)[-:=>]?\\)")
             (63 . ".\\(?:\\([.:=?]\\)[.:=?]?\\)")
             (91 . ".\\(?:\\(|\\)[]|]?\\)")
             (92 . ".\\(?:\\([\\n]\\)[\\]?\\)")
             (94 . ".\\(?:\\(=\\)=?\\)")
             (95 . ".\\(?:\\(|_\\|[_]\\)_?\\)")
             (119 . ".\\(?:\\(ww\\)w?\\)")
             (123 . ".\\(?:\\(|\\)[|}]?\\)")
             (124 . ".\\(?:\\(->\\|=>\\||[-=>]\\||||*>\\|[]=>|}-]\\).?\\)")
             (126 . ".\\(?:\\(~>\\|[-=>@~]\\)[-=>@~]?\\)"))))
      (dolist (char-regexp alist)
        (set-char-table-range composition-ligature-table (car char-regexp)
                              `([,(cdr char-regexp) 0 font-shape-gstring]))))
    (set-char-table-parent composition-ligature-table composition-function-table)))
#+end_src
** Views
#+begin_src emacs-lisp
(setq view-read-only t)
(global-set-key (kbd "M-v") 'read-only-mode)

;; view HEX colors
(use-package rainbow-mode
  :ensure
  :diminish
  :commands rainbow-mode

  :custom
  (rainbow-ansi-colors nil)
  (rainbow-x-colors nil)

  :config
  (--each '(web-mode rjsx-mode)
    (add-to-list 'rainbow-html-colors-major-mode-list it)))
#+end_src

* Frame Management
#+begin_src emacs-lisp
(setq prefered-fonts '("JetBrains Mono-11" "Victor Mono-11" "Fira Code-11" "Courier New-11"))
(setq k/font-to-use
      (-first #'(lambda (font-name)
                  (find-font (font-spec :name font-name)))
              prefered-fonts))

(when (display-graphic-p)
  (setq default-frame-alist
        `((tool-bar-lines .  0)
          (cursor-type    . bar)
          (fullscreen     . maximized)
          (font           . ,k/font-to-use)
          (vertical-scroll-bars    . nil))))

(unless (display-graphic-p)
  (menu-bar-mode -1))

(setq-default frame-title-format
              (concat  "%b -- emacs@" (system-name)))

(global-unset-key (kbd "C-j"))
(global-unset-key (kbd "C-z"))
(global-set-key   (kbd "s-\\") 'suspend-frame)

(setq ring-bell-function 'ignore)
(setq prettify-symbols-unprettify-at-point 'right-edge)
#+end_src

* Window Management
Define a sensible split policy -- taken from [[https://emacs.stackexchange.com/questions/20492/how-can-i-get-a-sensible-split-window-policy][this stack exchange answer]]
#+begin_src emacs-lisp
;; janelas -- buffer
(use-package buffer-move
  :bind
  ("C-x <up>"    . 'buf-move-up)
  ("C-x <left>"  . 'buf-move-left)
  ("C-x <down>"  . 'buf-move-down)
  ("C-x <right>" . 'buf-move-right))

(use-package ace-window
  :ensure t
  :bind ("M-o" . 'ace-window))

(setq split-height-threshold 120
      split-width-threshold 160)

(defun my-split-window-sensibly (&optional window)
  "replacement `split-window-sensibly' function which prefers vertical splits"
  (interactive)
  (let ((window (or window (selected-window))))
    (or (and (window-splittable-p window t)
             (with-selected-window window
               (split-window-right)))
        (and (window-splittable-p window)
             (with-selected-window window
               (split-window-below))))))

(setq split-window-preferred-function #'my-split-window-sensibly)

(add-hook 'text-mode-hook 'visual-line-mode)
(add-hook 'prog-mode-hook 'visual-line-mode)

(global-set-key (kbd "C-c <right>") 'other-window)
(global-set-key (kbd "C-c <left>") '(lambda ()
                                      (interactive)
                                      (other-window -1)))
#+end_src

* Icons
#+begin_src emacs-lisp
(use-package all-the-icons
  :pin melpa
  :config
  (nconc all-the-icons-icon-alist
         '(("\\.jsp$" all-the-icons-fileicon "ejs"
            :height 1.0
            :face all-the-icons-red)
           ("^routes.ts$" all-the-icons-faicon "map-signs"
            :height 1.0
            :face all-the-icons-blue)
           ("\\.tsx?$" all-the-icons-fileicon "typescript"
            :height 0.75
            :v-adjust -0.2
            :face all-the-icons-blue)
           ("\\.r$" all-the-icons-fileicon "R"
            :height 0.75
            :v-adjust -0.2
            :face all-the-icons-blue)
           ("\\.class$" all-the-icons-alltheicon "java"
            :height 0.8
            :v-adjust -0.1
            :face all-the-icons-green)
           ("\\.jar$" all-the-icons-faicon "compress"
            :height 0.8
            :v-adjust -0.1
            :face all-the-icons-green)))
  (nconc all-the-icons-mode-icon-alist
         '((ess-r-mode all-the-icons-fileicon "R"
                       :v-adjust 0.0
                       :face all-the-icons-blue-alt)
           (web-mode all-the-icons-fileicon "regex"
                       :v-adjust 0.0
                       :face all-the-icons-blue-alt))))

#+end_src

* Treemacs
#+begin_src emacs-lisp
(use-package treemacs
  :custom
  (treemacs-indentation-string         " ")
  (treemacs-collapse-dirs                5)
  (treemacs-display-in-side-window       t)
  (treemacs-width                       25)
  (treemacs-indentation                  2)
  (treemacs-follow-mode                  t)
  (treemacs-filewatch-mode               t)
  (treemacs-silent-refresh               t)

  (treemacs-workspace-switch-cleanup  'all)
  (treemacs-read-string-input 'from-minibuffer)

  :bind ("M-t" . treemacs)
  :config
  (treemacs-fringe-indicator-mode  'always)
  (treemacs-git-mode             'extended)

  (treemacs-create-icon
   :icon (format "  %s\t"
                 (all-the-icons-octicon
                  "file-text"
                  :height 1
                  :v-adjust -0.1
                  :face 'doom-themes-treemacs-file-face))
   :extensions (".project" "gradlew.bat" "pom.xml")))

(use-package treemacs-magit
  :ensure t
  :after magit treemacs)
#+end_src

* Line Numbers
#+begin_src emacs-lisp
(use-package linum-relative
  :hook
  ((prog-mode . linum-relative-mode)
   (org-mode  . linum-relative-mode)
   (TeX-mode  . linum-mode))
  :custom-face
  (linum-relative-current-face ((t (:background nil)))))
#+end_src

* DOOM
** Theme
#+begin_src emacs-lisp
(use-package doom-themes
  :pin melpa
  :custom
  (doom-themes-enable-bold   t)
  (doom-themes-enable-italic t)
  (doom-themes-treemacs-theme "doom-colors")

  :config
  (doom-themes-treemacs-config)
  (doom-themes-org-config))

;; (load-theme 'doom-nord             t)
;; (load-theme 'doom-snazzy           t)
;; (load-theme 'doom-laserwave        t)
;; (load-theme 'doom-acario-dark      t)
;; (load-theme 'doom-challenger-deep  t)
(load-theme 'doom-horizon          t)
;; (load-theme 'doom-gruvbox          t)

(set-face-attribute 'font-lock-keyword-face nil
                    :slant 'italic
                    :height 110
                    :weight 'bold
                    :family "Victor Mono")

#+end_src
** Modeline
#+begin_src emacs-lisp
(use-package doom-modeline
  :defer nil
  :config
  (doom-modeline-mode 1)
  (column-number-mode 1)

  :custom
  (doom-modeline-height                20)
  (doom-modeline-indent-info            t)
  (doom-modeline-major-mode             t)
  (doom-modeline-buffer-encoding        t)
  (doom-modeline-buffer-state-icon      t)
  (doom-modeline-major-mode-color-icon  t)
  (doom-modeline-icon (display-graphic-p))
  (doom-modeline-project-detection       'projectile)
  (doom-modeline-buffer-file-name-style 'buffer-name))

#+end_src

* Org-visuals
#+begin_src emacs-lisp
(use-package org-bullets
  :after (org)
  :custom (org-bullets-bullet-list
           '("â—‰" "â˜¯" "â—‹" "âœ¸" "âœ¿" "âœœ" "â—†" "â–¶"))
  :hook (org-mode . org-bullets-mode))
#+end_src

* Package Info
#+begin_src emacs-lisp
(provide 'visuals)
#+end_src
