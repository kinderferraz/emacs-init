#+title: Emacs Visuals.el
#+author: Kinder Rodrigues
#+startup: overview
#+property: header-args :comments yes :results silent :tangle "../init-files-c/visuals.el"
#+reveal_theme: night

* Editing
** Cursor Behaviour
#+begin_src emacs-lisp
  (use-package multiple-cursors
    :ensure t
    :defer t
    :bind
    ((:map global-map)
     ("C-c e"    . 'mc/edit-lines)
     ("C-,"      . 'mc/mark-previous-like-this)
     ("C-."      . 'mc/mark-next-like-this)
     ("C-c C-."  . 'mc/mark-all-like-this)
     ("C-c ."    . 'mc/edit-ends-of-lines)
     ("C-c ,"    . 'mc/edit-beginnings-of-lines)))

  (defun move-line-up ()
    (interactive)
    (transpose-lines 1)
    (forward-line -2))

  (defun move-line-down ()
    (interactive)
    (forward-line 1)
    (transpose-lines 1)
    (forward-line -1))

  (setq-default indent-tabs-mode nil)
  (setq-default tab-width 2)

  (setq-default default-input-method 'portuguese-prefix)

  (global-hl-line-mode)
  (global-subword-mode 1)

  (global-set-key (kbd "S-<backspace>") 'delete-trailing-whitespace)
  (global-set-key (kbd "s-<up>")        'move-line-up)
  (global-set-key (kbd "s-<down>")      'move-line-down)
  (global-set-key (kbd "C-<left>")      'backward-word)
  (global-set-key (kbd "C-<right>")     'forward-word)

#+end_src

** Delimiters
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :hook ((prog-mode LaTeX-mode). rainbow-delimiters-mode)
    :custom-face
      (rainbow-delimiters-depth-1-face ((t (:foreground "#A901DB"))))
      (rainbow-delimiters-depth-2-face ((t (:foreground "#FE2E2E"))))
      (rainbow-delimiters-depth-3-face ((t (:foreground "#d75f00"))))
      (rainbow-delimiters-depth-4-face ((t (:foreground "#aeb404"))))
      (rainbow-delimiters-depth-5-face ((t (:foreground "#088A08"))))
      (rainbow-delimiters-depth-6-face ((t (:foreground "#008787"))))
      (rainbow-delimiters-depth-8-face ((t (:foreground "#2ECCFA"))))
      (rainbow-delimiters-depth-9-face ((t (:foreground "#CC2EFA")))))

    ;; TODO: fix this
  (use-package smartparens
    :ensure t
    :hook ((prog-mode text-mode org-mode) . smartparens-mode)
          ((emacs-lisp-mode) . smartparens-strict-mode)
    :bind ("C-c s u" . sp-unwrap-sexp)
          ("C-c s n" . sp-up-sexp)

    :config
      (sp-local-pair '(org-mode latex-mode) "\\[" "\\]" :actions '(insert wrap))

      (sp-local-pair '(emacs-lisp-mode) "`" nil :actions nil)
      (sp-local-pair '(emacs-lisp-mode) "'" nil :actions nil)
      (sp-local-pair '(scheme-mode)     "'" nil :actions nil)
      (sp-local-pair '(latex-mode)      "`" nil :actions nil)
      (sp-local-pair '(lisp-mode)       "'" nil :actions nil)
      (sp-local-pair '(org-mode)        "'" nil :actions nil))

#+end_src

** Folding
#+begin_src emacs-lisp
  (use-package hideshow
    :ensure nil
    :hook ((prog-mode     . hs-minor-mode)
           (c-mode-common . set-c-regexp))
    :custom (hs-allow-nesting t)
    :bind
     (("C-f" . hs-toggle-hiding)
      ("C-t" . hs-hide-all)
      ("C-a" . hs-show-all))
    :config
     (defun set-c-regexp ()
       (setq hs-block-start-regexp "\\s(")
       (setq hs-block-end-regexp   "\\s)")))

  (setq-default show-trailing-whitespace t)
#+end_src

** Font Ligatures
#+begin_src emacs-lisp
(use-package ligature
  :load-path "./ligatures/"
  :config
  (ligature-set-ligatures
   't
   '("|||>" "<|||" "<==>" "<!--" "####" "~~>" "***" "||=" "||>"
     ":::" "::=" "=:=" "===" "==>" "=!=" "=>>" "=<<" "=/=" "!=="
     "!!." ">=>" ">>=" ">>>" ">>-" ">->" "->>" "-->" "---" "-<<"
     "<~~" "<~>" "<*>" "<||" "<|>" "<$>" "<==" "<=>" "<=<" "<->"
     "<--" "<-<" "<<=" "<<-" "<<<" "<+>" "</>" "###" "#_(" "..<"
     "..." "+++" "/==" "///" "_|_" "www" "&&" "^=" "~~" "~@" "~="
     "~>" "~-" "**" "*>" "*/" "||" "|}" "|]" "|=" "|>" "|-" "{|"
     "[|" "]#" "::" ":=" ":>" ":<" "$>" "==" "=>" "!=" "!!" ">:"
     ">=" ">>" ">-" "-~" "-|" "->" "--" "-<" "<~" "<*" "<|" "<:"
     "<$" "<=" "<>" "<-" "<<" "<+" "</" "#{" "#[" "#:" "#=" "#!"
     "##" "#(" "#?" "#_" "%%" ".=" ".-" ".." ".?" "+>" "++" "?:"
     "?=" "?." "??" ";;" "/*" "/=" "/>" "//" "__" "~~" "(*" "*)"
     "\\" "://" "www"))
  (global-ligature-mode t))

#+end_src


* Frame Management
#+begin_src emacs-lisp
(setq k/font-to-use
      (if (and (find-font (font-spec :name "JetBrains Mono"))
               (display-graphic-p))
          "JetBrains Mono-11"
        "andale mono 11"))

(when (display-graphic-p)
  (setq default-frame-alist
        `((tool-bar-lines .  0)
          (cursor-type    . bar)
          (fullscreen     . maximized)
          (font           . ,k/font-to-use)
          (vertical-scroll-bars    . nil)
          (ns-transparent-titlebar .   t))))

(unless (display-graphic-p)
  (menu-bar-mode -1))

(setq-default frame-title-format
              (concat  "%b -- emacs@" (system-name)))

(global-unset-key (kbd "C-j"))
(global-unset-key (kbd "C-z"))
(global-set-key   (kbd "s-\\") 'suspend-frame)

(setq ring-bell-function 'ignore)
(setq prettify-symbols-unprettify-at-point 'right-edge)
#+end_src


* Window Management
Define a sensible split policy -- taken from [[https://emacs.stackexchange.com/questions/20492/how-can-i-get-a-sensible-split-window-policy][this stack exchange answer]]
#+begin_src emacs-lisp
  ;; janelas -- buffer
  (use-package buffer-move
    :ensure t
    :bind (:map global-map
      ("C-x <up>"    . 'buf-move-up)
      ("C-x <left>"  . 'buf-move-left)
      ("C-x <down>"  . 'buf-move-down)
      ("C-x <right>" . 'buf-move-right)))

  (use-package ace-window
    :ensure t
    :bind ("M-o" . 'ace-window))

  (setq split-height-threshold 120
        split-width-threshold 160)

  (defun my-split-window-sensibly (&optional window)
    "replacement `split-window-sensibly' function which prefers vertical splits"
    (interactive)
    (let ((window (or window (selected-window))))
      (or (and (window-splittable-p window t)
               (with-selected-window window
                 (split-window-right)))
          (and (window-splittable-p window)
               (with-selected-window window
                 (split-window-below))))))

  (setq split-window-preferred-function #'my-split-window-sensibly)

  (add-hook 'text-mode-hook 'visual-line-mode)
  (add-hook 'prog-mode-hook 'visual-line-mode)
#+end_src


* Icons
#+begin_src emacs-lisp
  (use-package all-the-icons
    :ensure t
    :pin melpa
    :config (nconc all-the-icons-icon-alist
                   '(("\\.jsp$" all-the-icons-fileicon "ejs"
                      :height 1.0
                      :face all-the-icons-red)
                     ("^routes.ts$" all-the-icons-faicon "map-signs"
                      :height 1.0
                      :face all-the-icons-blue)
                     ("^\\.ts$" all-the-icons-fileicon "tsx"
                      :height 0.75
                      :v-adjust -0.2
                      :face all-the-icons-blue))))
#+end_src


* Treemacs
#+begin_src emacs-lisp
  (use-package treemacs
    :ensure t
    :custom
      (treemacs-python-executable "/usr/local/bin/python3")
      (treemacs-collapse-dirs
        (if (executable-find "python") 3 0))
      (treemacs-display-in-side-window      t)
      (treemacs-indentation                 2)
      (treemacs-indentation-string        " ")
      (treemacs-width                      25)
      (treemacs-filewatch-mode              t)
      (treemacs-fringe-indicator-mode       t)
      (treemacs-follow-mode                 t)
      (treemacs-workspace-switch-cleanup 'all)
      (treemacs-silent-refresh              t)

    :bind (:map global-map
            ("M-t" . treemacs))
    :config
    (treemacs-create-icon
     :icon (format "  %s\t"
                   (all-the-icons-octicon
                    "file-text"
                    :height 1
                    :v-adjust -0.1
                    :face 'doom-themes-treemacs-file-face))
     :extensions (".project" "gradlew.bat"))
    (treemacs-create-icon
     :icon (format "  %s\t"
                   (all-the-icons-icon-for-file
                    "a.xml"
                    :height 1
                    :v-adjust -0.1
                    :face 'doom-themes-treemacs-file-face))
     :extensions ("pom.xml")))

  (use-package treemacs-magit
    :ensure t
    :after magit treemacs)
#+end_src


* Line Numbers
#+begin_src emacs-lisp
  (use-package linum-relative
    :ensure t
    :hook
      ((prog-mode . linum-relative-mode)
       (org-mode  . linum-relative-mode)
       (TeX-mode  . linum-mode))
    :custom-face
      (linum-relative-current-face ((t (:inherit 'default)))))
#+end_src


* DOOM
** Theme
#+begin_src emacs-lisp
(use-package doom-themes
  :ensure t
  :defer t
  :pin melpa
  :custom
  (doom-themes-enable-bold   t)
  (doom-themes-enable-italic t)
  (doom-themes-treemacs-theme "doom-colors")

  :config
  (doom-themes-treemacs-config)
  (doom-themes-org-config))

;; (load-theme 'doom-snazzy           t)
;; (load-theme 'doom-laserwave        t)
;; (load-theme 'doom-acario-dark      t)
;; (load-theme 'doom-challenger-deep  t)
(load-theme 'doom-horizon          t)
;; (load-theme 'doom-nord             t)

(set-face-attribute 'font-lock-keyword-face nil :slant 'italic)
(set-face-attribute 'font-lock-constant-face nil :weight 'bold :slant 'italic)
#+end_src

** Modeline
#+begin_src emacs-lisp
(use-package doom-modeline
  :ensure t
  :config
  (doom-modeline-mode 1)
  (column-number-mode 1)

  :custom
  (doom-modeline-major-mode t)
  (doom-modeline-buffer-encoding t)
  (doom-modeline-buffer-state-icon t)
  (doom-modeline-major-mode-color-icon t)
  (doom-modeline-icon (display-graphic-p))
  (doom-modeline-project-detection 'projectile)
  (doom-modeline-buffer-file-name-style 'buffer-name)
  (doom-modeline-indent-info t)
  (doom-modeline-height 20))

#+end_src


* Org-visuals
#+begin_src emacs-lisp
(use-package org-bullets
  :ensure t
  :after (org)
  :custom (org-bullets-bullet-list
           '("◉" "☯" "○" "✸" "✿" "✜" "◆" "▶"))
  :hook (org-mode . org-bullets-mode))
#+end_src


* Package Info
#+begin_src emacs-lisp
  (provide 'visuals)
#+end_src
