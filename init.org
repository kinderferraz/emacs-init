#+title: emacs init.el
#+author: kinder rodrigues
#+email: ferraz.alkindar@gmail.com
#+startup: overview
#+property: header-args :comments yes :results silent :tangle yes
#+reveal_theme: night

* Before init
First things first, this is Brasil <3
#+begin_src elisp
;; (setq org-export-async-debug nil)
(setenv "LANG" "pt_BR.utf-8")
;; (setenv "LOCALE" "utf-8")

(setq inhibit-startup-screen t)
(setq gc-cons-threshold          500000000)
(put 'narrow-to-region       'disabled nil)
(put 'downcase-region        'disabled nil)
#+end_src

* Package Management
#+begin_src emacs-lisp
(setq package-enable-at-startup nil)
(setq package-archives
      '(("melpa"        . "https://melpa.org/packages/")
        ("melpa-stable" . "http://stable.melpa.org/packages/")
        ("gnu"          . "https://elpa.gnu.org/packages/")
        ("org"          . "http://orgmode.org/elpa/")))

(package-initialize)

(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(eval-when-compile (require 'use-package))

(setq use-package-always-ensure t)
(require 'bind-key)

;; auto-package-update
(use-package auto-package-update
  :config
  (auto-package-update-maybe)
  :custom
  (auto-package-update-delete-old-versions t))
#+end_src

* Load Settings
#+begin_src emacs-lisp
(add-to-list 'load-path (concat user-emacs-directory "init-files-c"))
(add-to-list 'load-path "~/.emacs.d/init-files/my-packages")
(require '~cond~>)

(require 'org-settings)
(require 'org-pretty)
(require 'tools)
(require 'languages)
(require 'visuals)
;; (require 'elegance)
#+end_src

* Emacs VCS
#+begin_src elisp
(setq backup-directory-alist `(("." . "~/.emacs.d/saves")))
(setq delete-old-versions t
      kept-old-versions 2
      version-control t)
#+end_src

* Helper Functions
This first function will tangle all the org files in the emacs
directory on save. All the files I regularly visit are init files :)
#+begin_src emacs-lisp
(defun k/tangle-inits ()
  "this function is a recurring sntippet online, this is my spin on it
if the current buffer is '.org', and in '~/.emacs.d the code-blocks are
tangled. (someday the tangled file will be compiled, but not today)"
  ;; avoid running hooks when tangling.
  (-let* ((prog-mode-hook nil)
          (this-file (buffer-file-name)))
    ;; (target-file (s-replace ".org" ".el" this-file)))
    (when (and (string-suffix-p ".org" this-file)
               (string-prefix-p (expand-file-name user-emacs-directory)
                                this-file))
      (org-babel-tangle)
      )))

(add-hook 'after-save-hook 'k/tangle-inits)
#+end_src

A nice little function that will prompt for an org init file.
Files I don't have the habit of editing so much are removed from
the list containing options in the mini-buffer
#+begin_src emacs-lisp
(setq k/remove-from-find-inits-list '("org-async.org"))

(setq k/find-inits-list
      (-concat '("init.org")
               (-difference
                (--filter (string-suffix-p ".org" it)
                          (directory-files "~/.emacs.d/init-files/" ))
                k/remove-from-find-inits-list)))

(defun k/find-inits (file)
  "A lovely trick to learn on emacs. FILE is read with completion,
it's possibilities are read from the directory with my settings"
  (interactive
   (list (completing-read
          "Init File: "
          k/find-inits-list)))
  (if (string-equal file "init.org")
      (find-file (expand-file-name "~/.emacs.d/init.org"))
    (find-file (expand-file-name (concat "~/.emacs.d/init-files/"
                                         file)))))

#+end_src

This is probably the least useful of these, but i enjoy opening emacs
with this file and a scratch buffer side by side
#+begin_src emacs-lisp
(defun k/prepare-init (&rest _)
  "Just how i like my emacs startup screen."
  (split-window-right)
  (find-file (expand-file-name "~/.emacs.d/init.org")))

(add-hook 'emacs-startup-hook
          (lambda ()
            (message "Emacs ready in %s with %d garbage collections."
                     (format "%.2f seconds"
                             (float-time
                              (time-subtract after-init-time before-init-time)))
                     gcs-done)))

(add-hook 'after-init-hook 'k/prepare-init)
#+end_src

Go to college semester folder
#+begin_src emacs-lisp
(defun find-semester ()
  "Go to college semester folder"
  (interactive)
  (find-file "/Users/alkindarferraz/Documents/ifsp/2s20/master.org"))

#+end_src

* Reset GC
#+begin_src emacs-lisp
(setq gc-cons-threshold   (* 2 1000 1000))
#+end_src

* General kbds
#+begin_src emacs-lisp
(global-set-key (kbd "M-w")    'widen)
(global-set-key (kbd "C-d")    'eval-defun)
(global-set-key (kbd "M-r")    'eval-region)
(global-set-key (kbd "M-i")    'k/find-inits)
(global-set-key (kbd "M-?")    'eval-last-sexp)
(global-set-key (kbd "M-n")    'narrow-to-region)
(global-set-key (kbd "<down>") 'next-logical-line)
(global-set-key (kbd "<up>")   'previous-logical-line)
(global-set-key (kbd "C-c b")  'switch-to-buffer-other-window)
(global-set-key (kbd "C-x f")  'find-file)
(global-set-key (kbd "C-c s")  'find-semester)
(global-set-key (kbd "M-<backspace>")  'backward-kill-word)
#+end_src
